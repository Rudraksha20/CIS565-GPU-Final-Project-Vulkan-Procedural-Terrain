#version 450
#extension GL_ARB_separate_shader_objects : enable

// if <= 0, enable dynamic tess
// otherwise, hardcode tessellation level to STATIC_TESS
// e.g. to force all tessellation to 100, set STATIC_TESS to 100
#define STATIC_TESS -1

#define MIN_TESS_LEVEL 25.0
#define MAX_TESS_LEVEL 250.0

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

// based on: https://stackoverflow.com/questions/37056159/using-different-push-constants-in-different-shader-stages
layout(push_constant) uniform s_pushConstants {
    int numBlades;
} pushConstants;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
	vec3 cameraPos;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
	vec4 color;
};

layout(set = 2, binding = 0) buffer InputBlades {
 	 Blade inputBlades[];
};

//output
layout(set = 2, binding = 1) buffer CulledBlades {
 	Blade culledBlades[];
};

layout(set = 2, binding = 2) buffer NumBlades {
 	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount; // = 1
 	  uint firstVertex;   // = 0
 	  uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

#if (STATIC_TESS <= 0)
float getTesselationLevel(float dist) {
	if (dist >= 1.0) {
		return MIN_TESS_LEVEL;
	}
	else if (dist > 0.33) {
		return mix(MIN_TESS_LEVEL, MAX_TESS_LEVEL, floor((1.0 - dist) / 0.66 * 9.0) / 9.0);//MIN_TESS_LEVEL + (MAX_TESS_LEVEL - MIN_TESS_LEVEL) * floor((1.0 - dist) / 0.05 / 19.0) * 19.0;	
	}
	else {
		return MAX_TESS_LEVEL;	
	}
}
#endif

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

	// TODO: push constant???
	if (gl_GlobalInvocationID.x >= pushConstants.numBlades) {
		return;
	}

    // TODO: Apply forces on every blade and update the vertices in the buffer
	Blade blade = inputBlades[gl_GlobalInvocationID.x];

	const float tileDim = blade.v0.w;

	// Update the position of the terrain points based on the movement of the camera
	vec4 eyePos = vec4(camera.cameraPos, 1.0);

	blade.v0.x += floor(eyePos.x / tileDim) * tileDim;
	blade.v0.z += floor(eyePos.z / tileDim) * tileDim;

#if STATIC_TESS <= 0
	mat4 viewProj = camera.proj * camera.view;
	
	const vec4 tileCorner = vec4(blade.v0.xyz, 1.0);
	// left edge
	vec4 mid = tileCorner;
	mid.z += tileDim * 0.5;

	float dist = distance(mid.xyz, eyePos.xyz) / 70.0;//projMid.z / projMid.w;

	// store tesselation level in v1 for now
	blade.v1.x = getTesselationLevel(dist);

	// top edge
	mid = tileCorner;
	mid.x += tileDim * 0.5;
	mid.z += tileDim;

	dist = distance(mid.xyz, eyePos.xyz) / 70.0;//projMid.z / projMid.w;

	// store tesselation level in v1 for now
	blade.v1.w = getTesselationLevel(dist);

	// right edge
	mid = tileCorner;
	mid.x += tileDim;
	mid.z += tileDim * 0.5;

	dist = distance(mid.xyz, eyePos.xyz) / 70.0;//projMid.z / projMid.w;

	// store tesselation level in v1 for now
	blade.v1.z = getTesselationLevel(dist);
	
	// bottom edge
	mid = tileCorner;
	mid.x += tileDim * 0.5;

	dist = distance(mid.xyz, eyePos.xyz) / 70.0;//projMid.z / projMid.w;

	// store tesselation level in v1 for now
	blade.v1.y = getTesselationLevel(dist);
#else
	blade.v1 = vec4(STATIC_TESS);
#endif
	// remove if for forward pipeline
	if (blade.v2.x <= 0.01) {
		uint idx = atomicAdd(numBlades.vertexCount, 1);
		culledBlades[idx] = blade; //inputBlades[gl_GlobalInvocationID.x];
	}
}
